}}
}}
}}
}}
}}
}}
}}
}}
''', .open = "{{", .close = "}}")
vol_qry <- function(id, from, to) {
query <- glue::glue("
{{
trafficData(trafficRegistrationPointId: '{id}') {{
volume {{
byHour(from: '{from}', to: '{to}') {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
")
return(query)
}
source("gql-queries/vol_qry.r")
source("functions/GQL_function.r")
source("gql-queries/vol_qry.r")
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
query <- vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0)
)
print(query)
query_result <- GQL(query, .url = configs$vegvesen_url)
vol_qry <- function(id, from, to) {
query <- glue::glue("
{{
trafficData(trafficRegistrationPointId: \"{id}\") {{
volume {{
byHour(from: \"{from}\", to: \"{to}\") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
", .open = "{{", .close = "}}")
return(query)
}
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''')
return(query)
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''')
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: {{{id}}}) {{
volume {{
byHour(from: {{{from}}}, to: {{{to}}}) {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''', .open = "{{", .close = "}}")
vol_qry <- function(id, from, to) {
query <- paste(
'{',
'  trafficData(trafficRegistrationPointId: "', id, '") {',
'    volume {',
'      byHour(from: "', from, '", to: "', to, '") {',
'        edges {',
'          node {',
'            from',
'            to',
'            total {',
'              volumeNumbers {',
'                volume',
'              }',
'            }',
'          }',
'        }',
'      }',
'    }',
'  }',
'}',
sep = '\n'
)
return(query)
}
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''')
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''')
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''')
# Create a function to generate volume queries in Vegvesen format
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''', .open = "{{", .close = "}}")
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''')
vol_qry <- function(id, from, to) {
query <- paste0(
'{\n',
'  trafficData(trafficRegistrationPointId: "', id, '") {\n',
'    volume {\n',
'      byHour(from: "', from, '", to: "', to, '") {\n',
'        edges {\n',
'          node {\n',
'            from\n',
'            to\n',
'            total {\n',
'              volumeNumbers {\n',
'                volume\n',
'              }\n',
'            }\n',
'          }\n',
'        }\n',
'      }\n',
'    }\n',
'  }\n',
'}\n'
)
return(query)
}
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- paste(
'{',
'  trafficData(trafficRegistrationPointId: "', id, '") {',
'    volume {',
'      byHour(from: "', from, '", to: "', to, '") {',
'        edges {',
'          node {',
'            from',
'            to',
'            total {',
'              volumeNumbers {',
'                volume',
'              }',
'            }',
'          }',
'        }',
'      }',
'    }',
'  }',
'}',
sep = '\n'
)
return(query)
}
source("functions/GQL_function.r")
source("gql-queries/vol_qry.r")
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- list(
trafficData = list(
trafficRegistrationPointId = id,
volume = list(
byHour = list(
from = from,
to = to,
edges = list(
node = list(
from = 1,
to = 1,
total = list(
volumeNumbers = list(
volume = 1
)
)
)
)
)
)
)
)
json_query <- jsonlite::toJSON(query, auto_unbox = TRUE, pretty = TRUE)
return(json_query)
}
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''')
vol_qry <- function(id, from, to) {
query <- glue::glue('
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
')
return(query)
}
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
vol_qry <- function(id, from, to) {
query <- glue::glue(''
{{
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''')
vol_qry <- function(id, from, to) {
query <- glue::glue('''
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
''', .open = "{{", .close = "}}")
{
trafficRegistrationPoints {
query {
